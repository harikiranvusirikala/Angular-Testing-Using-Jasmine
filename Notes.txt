Introduction to Unit Testing:
===
Angular Unit Testing is crucial for ensuring the reliability, stability, and maintainability of your application. It helps catch bugs early, provides a safety net for code changes, and enhances code quality.
When using Jasmine for Angular unit testing, developers focus on testing individual components or services in isolation.

Test suites, created with the describe function, group related test cases. Individual test cases (specs) are defined using the it function. This structure helps organize and categorize tests based on functionality.

In Unit Testing, it's crucial to avoid reliance on external services, APIs, or databases. Instead, use test doubles like mocks or stubs to simulate the behavior of dependencies. This ensures that tests focus on the specific functionality of the unit being tested.

Jasmine provides various matchers, such as toEqual and toBe, for asserting expectations in test cases. These matchers allow developers to check if the actual result matches the expected result, ensuring the correctness of the tested functionality.

Some commonly used Jasmine matchers in Angular testing:
• toEqual: Tests for deep equality (used for objects and arrays).
• toBe: Tests for strict equality (used for primitives like numbers, strings, and booleans).
• toContain: Checks if an array or string contains a specific value.
• toBeTruthy: Checks if a value is truthy (not falsy).
• toBeFalsy: Checks if a value is falsy (not truthy).
• toBeGreaterThan, toBeLessThan, toBeCloseTo: Used for numeric comparisons.
expect(actualValue).toBeCloseTo(expectedValue, decimalPlaces);
• toThrow: Checks if a function throws an exception.
expect(() => someFunction()).toThrow();
• toHaveBeenCalled, toHaveBeenCalledWith: Checks if a spy (mocked function) has been called or called with specific arguments.
expect(spy).toHaveBeenCalled();
expect(spy).toHaveBeenCalledWith(arg1, arg2);

Assertion statements are written using the expect function. This function sets up the value or expression to be tested and is followed by a matcher function that performs the comparison between the actual and expected values.

Jasmine offers functions like beforeEach, afterEach, beforeAll, and afterAll for setting up and tearing down activities before and after test execution. These functions help create a consistent and controlled environment for testing.

Jasmine Global Functions for Setup and Teardown Activities:
• beforeEach
• afterEach
• beforeAll
• afterAll

Well-written unit tests contribute to better documentation, increased code confidence, and faster identification of issues. They lead to a more stable and reliable Angular application, providing assurance that the application functions as intended.
===



Setup:
===
Install following tools:
• Node.js (^18.15.0 || ^20.9.0) and npm (min version required 10.1.0) 
• Angular CLI (v16)
• Visual Studio Code

• Jasmine and Karma are essential tools for testing Angular applications. 
• Karma is the test runner for Angular applications. It will run your Jasmine tests in various browsers and provide you with test results in the terminal. You can also view test results in a browser window by default.
• Both Jasmine and Karma are already included by default when you create a new Angular project with the Angular CLI. 
• If you need to install them manually, you can do so with npm, using the below command;
$ npm install --save jasmine karma karma-jasmine karma-chrome-launcher

app.component.spec.ts
==
import { TestBed } from '@angular/core/testing';
import { AppComponent } from './app.component';

describe('AppComponent', () => {
  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [AppComponent],
    }).compileComponents();
  });

  it('should create the app', () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app).toBeTruthy();
  });

  it(`should have the 'testing' title`, () => {
    const fixture = TestBed.createComponent(AppComponent);
    const app = fixture.componentInstance;
    expect(app.title).toEqual('testing');
  });

  it('should render title', () => {
    const fixture = TestBed.createComponent(AppComponent);
    fixture.detectChanges();
    const compiled = fixture.nativeElement as HTMLElement;
    expect(compiled.querySelector('h1')?.textContent).toContain('Hello, testing');
  });
});
==

login.service.spec.ts
==
import { TestBed } from '@angular/core/testing';

import { LoginService } from './login.service';

describe('LoginService', () => {
  let service: LoginService;

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(LoginService);
  });

  it('should be created', () => {
    expect(service).toBeTruthy();
  });
});
==

$ ng test

Jasmine is integrated seamlessly with the Angular CLI, so we don't need to perform additional setup steps for Jasmine itself beyond what's provided by the Angular CLI.
===



Unit Testing Angular with Jasmine:
===
Below is the execution flow of the command ng test: 
• Angular CLI reads the configuration in the ‘angular.json’ file to determine which project and testing setup to use.
• Then Angular CLI sets up a test environment using TestBed. TestBed is a part of Angular's testing utilities that allow you to configure and create instances of components and services for testing.
• Karma, a popular test runner, to execute tests based on the settings in the 'karma.config.js' file. This configuration includes specifying which browsers to run the tests.
• Jasmine, the testing framework, takes over. It starts executing the test spec files(files with ‘.spec.ts' extensions) and runs the test suites and individual test cases.
• The ‘ng test’ command returns an exit status to indicate whether all tests passed or if there were failures of errors.

Angular Utilities:
TestBed
• It is the Angular testing utility that provides the mock of the application’s root module: @NgModule

configureTestingModule:
• This method configures the module environment for the component class to be tested.
• It is called within beforeEach so that TestBed resets itself to the base state before each spec runs.
• Note: the class to be tested is detached from its application module and is reattached to a dynamically constructed Angular test module.
• configureTestingModule method declares the component to be tested.

TestBed: createComponent
• It is the Angular testing utility method that returns the instance of the component class being tested.
• It returns the object of type Component Fixture.
• It closes the current TestBed instance for any further configurations.
• ComponentFixture is the handle provided on the instance of the component under test.

TestBed: detectChanges
• It is the Angular testing utility method that is responsible for detecting any angular change within a test.
• fixture.detectChanges() helps test to convey to Angular when to perform the detection.
• Note: Do not re-configure TestBed after calling createComponent.
• The TestBed.createComponent does not trigger change detection.

Testing an Angular component which has a service dependency:
A component-under-test doesn't have to be injected with real services as it is Unit Testing. A test-double or stub instead can be provided.

Eg: login.component.spec.ts
  const mockLoginService = jasmine.createSpyObj('LoginService',['getUsers']);
  const mockRouter = jasmine.createSpyObj('Router',['navigate'])
  await TestBed.configureTestingModule({
    declarations: [ LoginComponent ],
    imports:[FormsModule, ReactiveFormsModule,HttpClientTestingModule ],
    providers:[{provide: LoginService, useValue:mockLoginService},
    {provide:Router, useValue:mockRouter, FormBuilder}]
  })
    component.loginForm.controls['username'].setValue('user');
    component.loginForm.controls['password'].setValue('user');
    expect(component.loginForm.valid).toBeTruthy();
    expect(debugElement.nativeElement.querySelector('button[type="submit"]').disabled).toBeFalsy;

Testing an Angular component which has a life cycle method:
The ngOnInit() is a lifecycle hook in Angular that is called after the constructor is called and after the component's inputs have been initialized. It is used to perform any additional initialization that is required for the component.

Eg: products-list.component.spec.ts
    const loginServiceSpy = jasmine.createSpyObj('LoginService', ['getMobileData']);
    TestBed.configureTestingModule({
      declarations: [ProductsListComponent,SortPipe],
      imports:[HttpClientTestingModule,FormsModule,ReactiveFormsModule],
      providers:[{ provide: loginService, useValue: loginServiceSpy }]
    });
    fixture = TestBed.createComponent(ProductsListComponent);
    component = fixture.componentInstance;
    loginService = TestBed.inject(LoginService) as jasmine.SpyObj<LoginService>;
    fixture.detectChanges();

    spyOn(component, 'ngOnInit').and.callThrough();
    component.ngOnInit();
    expect(component.ngOnInit).toHaveBeenCalled();

Testing Angular Pipes using Jasmine:

Eg: sort.pipe.spec.ts
    const pipe = new SortPipe();
    const  sortedMobiles = pipe.transform(mobiles,'other');
    expect(sortedMobiles).toEqual(mobiles)

Testing Angular Services using Jasmine:

HttpClientTestingModule:
• Configures HttpClientTestingBackend as the HttpBackend used by HttpClient to make any request. 
• HttpClientTestingBackend is a mock back-end that acts as a server. 
• It will provide a response if any request comes for the configured method.

HttpTestingController:
• Controller to be injected into tests, that allows for mocking and flushing of requests.

Eg: login.service.spec.ts
    TestBed.configureTestingModule({
      declarations: [LoginComponent, ProductsListComponent],
      imports: [HttpClientTestingModule],
      providers: [LoginService]
    })
      .compileComponents();
    service = TestBed.inject(LoginService);
    httpMock = TestBed.inject(HttpTestingController)

    service.getMobileData().subscribe((data) => {
      expect(data).toEqual(dummyData.mobiles);
    });

    const req = httpMock.expectOne('assets/mobiles.json');
    expect(req.request.method).toBe('GET');
    req.flush(dummyData);
    httpMock.verify();

Example Scenarios for Testing Services:
===
Verifying that the component can be created with the service injected:
const service = fixture.debugElement.injector.get(YourService);
  This line retrieves an instance of a service named YourService using dependency injection. It's assuming that the service is provided at the level of the component's injector.
expect(service).toBeTruthy();
  This line checks whether the service variable is truthy, indicating that the service has been successfully injected into the component.

Mocking a service method using Jasmine spies to control its behaviour:
spyOn(service, 'methodName').and.returnValue('mockedValue');
  This line sets up a spy on the methodName of the injected service. Spies are used in testing to intercept and track calls to functions. By spying on this method, the test can verify whether it is called and control its behavior during the test. In this case, it's also specifying that when the method is called, it should return 'mockedValue'.
component.someMethodThatUsesTheService();
  This line is likely invoking a method (`someMethodThatUsesTheService`) of the component under test. This method likely utilizes the injected service in some way.
expect(service.methodName).toHaveBeenCalled();
  This assertion checks whether the `methodName` of the service has been called during the execution of `someMethodThatUsesTheService` of the component. If the method has been called, the test will pass.

Testing asynchronous operations in the component that involve the injected service:
it('should handle asynchronous operation', fakeAsync(() => {
  spyOn(service, 'asyncMethod').and.returnValue(of('mockedAsyncData'));
  component.triggerAsyncOperation();
  tick();
  expect(component.asyncData).toEqual('mockedAsyncData');
}));

Verifying that the component correctly injects service dependencies:
const service = fixture.debugElement.injector.get(YourService);
const dependency = fixture.debugElement.injector.get(YourDependency);
expect(service).toBeTruthy();
expect(dependency).toBeTruthy();

Using spies to mock service methods and assert their calls:
spyOn(service, 'someMethod');
component.triggerServiceMethod();
expect(dataService.someMethod).toHaveBeenCalled();

Testing how the component handles errors from the injected service:
spyOn(service, 'errorMethod').and.returnValue(throwError('Some error'));
component.triggerErrorMethod();
expect(component.errorMessage).toEqual('Some error');

Verifying that the component correctly configures the injected service:
TestBed.configureTestingModule({
declarations: [YourComponent],
providers: [
{ provide: YourService, useValue: { config: 'testConfig' } },
],
});
const service = fixture.debugElement.injector.get(YourService);
expect(service.config).toEqual('testConfig');
===

Testing Angular Routing using Jasmine:
Angular uses the "navigate" method which attempts to navigate to the specified URL string using the router.
The regular Router class is stub with RouterStub that can use the method "navigate".
The method is spied to navigate that belongs to RouterStub.

Eg: login.component.spec.ts
  mockLoginService = jasmine.createSpyObj('LoginService',['getUsers']);
  mockRouter = jasmine.createSpyObj('Router',['navigate'])

    imports:[FormsModule, ReactiveFormsModule,HttpClientTestingModule ],
    providers:[{provide: LoginService, useValue:mockLoginService},
    {provide:Router, useValue:mockRouter, FormBuilder}]

    const fakeCredentials = [{username:'user', password:'user'}];
    mockLoginService.getUsers.and.returnValue(of(fakeCredentials));
    component.loginForm.setValue({username:'user', password:'user'});
    component.login();
    expect(mockRouter.navigate).toHaveBeenCalledWith(['products'])

Code Coverage:
$ ng test --no-watch --code-coverage

This command will execute our Jasmine tests and generate code coverage reports.
After running the tests, we'll find code coverage reports in the `coverage` directory of our project.
Open the `index.html` file in our browser to view the detailed code coverage report.
This code coverage report will show you which lines of code are covered (green) and which are not (red).
It provides information on the percentage of code covered by your tests.

Best Practices with respect to code coverage:
Aim for high code coverage, but remember that 100% coverage is not always necessary or even practical.
Focus on testing critical parts of our code.

About Lines, Functions, Branch, Statement:
• Line coverage, also known as statement coverage, measures the number of executable lines in our code that were executed during our tests. It helps ensure that every line of our code is tested, reducing the likelihood of undiscovered bugs.
• Function coverage tracks whether each function or method in our code has been called during the tests. Ensuring all functions are tested helps in detecting logic errors and unexpected code paths.
• Branch coverage assesses if every possible branch or decision point in our code has been taken during testing. It's crucial conditional errors and making sure all branches of our code are considered.
• Statement coverage, often referred to as line coverage, checks whether each executable statement in our code has been executed during testing. It helps identify lines of code that haven't been tested, reducing the risk of untested behavior.


Summary: Unit Testing Angular with Jasmine:

Angular Testing using Jasmine:
The 'ng test' command in Angular performs unit testing by executing spec files through Angular CLI, TestBed, Karma, and Jasmine.
TestBed is a vital utility providing a mock of the root module.
The method configureTestingModule sets up the module environment, and createComponent returns a tested component instance.
The detectChanges function in TestBed manages Angular change detection.
It is crucial to avoid reconfiguring TestBed after calling createComponent to prevent issues with change detection.

Testing Angular Components using Jasmine:
The content discusses unit testing in Angular, emphasizing service dependency testing with stubs instead of real services.
It illustrates this approach with LoginComponent using a LoginService stub.
The importance of the ngOnInit lifecycle hook is highlighted for additional component initialization.
The example of ProductListComponent using ngOnInit is presented as a case for testing the lifecycle method invocation.
Overall, the content underscores best practices for testing service dependencies and lifecycle methods in Angular components.

Testing Angular Services using Jasmine:
Angular testing enables unit testing of HTTP services without actual requests using HttpClientTestingModule.
This module configures a mock server, HttpClientTestingBackend, responding to requests based on configured methods.
The HttpTestingController, injected into tests, facilitates request mocking and flushing.
This approach focuses on verifying request URLs and ensuring proper responses, streamlining testing for HTTP services in Angular.

Testing Angular Routing using Jasmine
Angular testing for routing involves verifying component navigation using the "navigate" method in the router.
The regular Router class is substituted with a stub, RouterStub, which includes the spied "navigate" method to ensure correct navigation under specific conditions in unit tests.
